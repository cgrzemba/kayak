#!/bin/bash
#
# {{{ CDDL HEADER
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
# }}}

# Copyright 2017 OmniTI Computer Consulting, Inc. All rights reserved.
# Copyright 2023 OmniOS Community Edition (OmniOSce) Association.
#

export PATH=/usr/bin:/usr/sbin:/sbin

SRCDIR=`dirname $0`
[ ${SRCDIR:0:1} = "/" ] || SRCDIR=`pwd`/$SRCDIR
KYKDIR=$SRCDIR/..

. $KYKDIR/lib/defs.sh

fail() {
    echo $*
    exit 1
}

note() {
    echo "***"
    echo "*** $*"
    echo "***"
}

ZROOT=rpool
OUT=
CLEANUP=0
ARCH=`uname -p`
NATIVE_ARCH=$ARCH
VARIANT=global
typeset -i INSTALL_ENTIRE=1
set -- `getopt a:cd:o:p:V: $*`
for i in $*
do
    case $i in
        -a) ARCH=$2; shift 2;;
        -c) CLEANUP=1; shift ;;
        -d) ZROOT=$2; shift 2;;
        -o) OUT=$2; shift 2;;
        -p) PROFILE=$2; shift 2;;
        -P) PUBLISHER_OVERRIDE=1; shift ;;
        -V) VARIANT=$2; shift 2;;
        --) shift; break ;;
    esac
done

case $ARCH in
    i386)
        PUBURL=$OOCEPUBURL
        EXTRAPUBURL=
        OUTPUT_PREFIX=kayak
        ;;
    aarch64)
        INSTALL_ENTIRE=0
        PUBURL=$OOCEBRAICHURL
        EXTRAPUBURL=$OOCEBRAICHURL
        OUTPUT_PREFIX=aarch64
        ;;
    *)  fail "Unknown arch '$ARCH'" ;;
esac

typeset -i native
[ $ARCH = $NATIVE_ARCH ] && native=1 || native=0

# PKGURL in the environment overrides the publisher path used for installation
# but the publisher will be reset to PUBURL before bundling up the final image.
: ${PKGURL:=$PUBURL}
: ${EXTRAPKGURL:=$EXTRAPUBURL}

name=$1
if [ -z "$name" ]; then
    echo "$0 [-cP] [-d zfsparent] [-p profile] [-o outputfile] <release_name>"
    exit
fi
ZDATASET=$ZROOT/$name

# Setting this flag lets `pkg` know that this is an automatic installation and
# that the installed packages should not be marked as 'manually installed'
export PKG_AUTOINSTALL=1

entire_version=${name//[a-z]/}
entire_fmri="entire@11-$entire_version"

MPR=`zfs get -o value -H mountpoint $ZROOT`
if [ -z "$OUT" ]; then
    OUT=$MPR/${OUTPUT_PREFIX}_$name.zfs.xz
    [ $VARIANT = nonglobal ] && OUT=$MPR/${OUTPUT_PREFIX}_$name.ngz.zfs.xz
fi

cat << EOM

                  Dataset: $ZDATASET
                Publisher: $OOCEPUB
  Installation Repository: $PKGURL
         Extra Repository: $EXTRAPKGURL
         Final Repository: $PUBURL
   Final extra Repository: $EXTRAPUBURL
                     Arch: $ARCH
                  Variant: $VARIANT
                   Output: $OUT

EOM

function postinstall_aarch64 {
    typeset ROOT=$1

    note "aarch64 postinstall steps"

    # aarch64 doesn't currently include this file but we need it for pkg
    # to operate correctly. Without it the name of the default zone brand
    # cannot be determined.
    mkdir -p $ROOT/etc/zones
    cp /etc/zones/SUNWdefault.xml $ROOT/etc/zones/

    # Install skeleton /dev
    tar zxf $KYKDIR/data/dev.tar.gz -C $ROOT 2>&1 | grep -v 'Removing leading'
}

if zfs list $ZDATASET@snap_$ARCH > /dev/null 2>&1; then
    note "Rolling back to last @snap"
    zfs rollback -r $ZDATASET@snap_$ARCH || fail "zfs rollback"
    MP=`zfs get -o value -H mountpoint $ZDATASET`
    [ -n "$MP" -a -d "$MP" ] || fail "$MP is not a directory"
    export PKG_IMAGE=$MP
else
    zfs list $ZDATASET >/dev/null 2>&1 && zfs destroy -r $ZDATASET
    zfs create $ZDATASET || fail "zfs create"
    MP=`zfs get -o value -H mountpoint $ZDATASET`
    [ -n "$MP" -a -d "$MP" ] || fail "$MP is not a directory"
    args=
    args+="--variant variant.arch=$ARCH "
    [ -n "$DEBUG_VARIANT" ] && args+="--variant debug.illumos=true "
    note "Creating IPS image"
    echo "pkg image-create -F -p $OOCEPUB=$PKGURL $MP"
    pkg image-create --full $args \
        --publisher $OOCEPUB=$PKGURL $MP || fail "image-create"
    export PKG_IMAGE=$MP
    [ -n "$EXTRAPKGURL" ] && \
        pkg set-publisher -P --no-refresh -O $EXTRAPKGURL extra.$OOCEPUB
    if ((INSTALL_ENTIRE)); then
        note "Installing $entire_fmri"
        pkg install $entire_fmri || fail "install entire"
    else
        note "Installing all packages"
        pkg install '*' || fail "pkg install"
    fi
    pkg clean
    sudo sed -i '/^last_uuid/d' $MP/var/pkg/pkg5.image

    [ `type -t postinstall_$ARCH` = function ] && postinstall_$ARCH $MP

    zfs snapshot $ZDATASET@snap_$ARCH
fi

note "Changing zone variant to $VARIANT"
pkg change-variant opensolaris.zone=$VARIANT

if ((INSTALL_ENTIRE)); then
    note "Installing optional packages"
    typeset -a optlist=
    while read p v; do
        [ -n "$v" -a "$v" != "$VARIANT" ] && continue

        echo "++++ $p"
        optlist+=($p)
    done < <(pkg contents -rH -a type=optional \
        -o fmri,variant.opensolaris.zone $entire_fmri)

    pkg install -g https://pkg.omnios.org/r151044/core/ ${optlist[*]} || fail "install optional entire jo"
fi

if [ -n "$PROFILE" ]; then
    note "Applying custom profile: $PROFILE"
    [ -r "$PROFILE" ] || fail "Cannot find file: $PROFILE"
    while read line; do
        TMPPUB=`echo $line | cut -f1 -d=`
        TMPURL=`echo $line | cut -f2 -d=`
        if [ -n "$TMPURL" -a "$TMPURL" != "$TMPPUB" ]; then
            note "Setting publisher: $TMPPUB / $TMPURL"
            pkg set-publisher -g $TMPURL $TMPPUB \
                || fail "set publisher $TMPPUB"
            OOCEPUB=$TMPPUB
            PKGURL=$TMPURL
        else
            note "Installing additional package: $line"
            pkg install -g $PKGURL $line || fail "install $line"
        fi
    done < <(grep . $PROFILE | grep -v '^ *#')
fi

if [ -n "$PUBLISHER_OVERRIDE" ]; then
    OOCEPUBURL=$PKGURL
fi
note "Setting omnios publisher to $PUBURL"
pkg unset-publisher $OOCEPUB
pkg set-publisher -P --no-refresh -O $PUBURL $OOCEPUB

if [ -n "$EXTRAPUBURL" ]; then
    note "Setting omnios extra publisher to $EXTRAPUBURL"
    pkg unset-publisher extra.$OOCEPUB
    pkg set-publisher -P --no-refresh -O $EXTRAPUBURL extra.$OOCEPUB
fi

# Starting with r151014, require signatures for the omnios publishers.
if [[ $PUBURL != */bloody/* ]]; then
    note "Setting signature policy to require."
    pkg set-publisher \
        --set-property signature-policy=require-signatures $OOCEPUB
fi

pkg clean
pkg purge-history

function seed_smf
{
    typeset variant="${1:-global}"

    note "Seeding SMF database ($variant)"

    [ -x "$PREBUILT_ILLUMOS/usr/src/cmd/svc/svccfg/svccfg-native" ] \
        && SVCCFG="${PREBUILT_ILLUMOS}/usr/src/cmd/svc/svccfg/svccfg-native" \
        || SVCCFG=/usr/sbin/svccfg
    SVCCFG_DTD=$MP/usr/share/lib/xml/dtd/service_bundle.dtd.1
    SVCCFG_REPOSITORY=/tmp/kayak.svc.$$
    SVCCFG_CHECKHASH=1
    export SVCCFG_DTD SVCCFG_REPOSITORY SVCCFG_CHECKHASH

    cp $MP/lib/svc/seed/$variant.db $SVCCFG_REPOSITORY || fail "seed $variant"
    chmod 0600 $SVCCFG_REPOSITORY
    chown root:sys $SVCCFG_REPOSITORY
    PKG_INSTALL_ROOT=$MP $SVCCFG import -p /dev/stdout $MP/lib/svc/manifest

    cp -p $SVCCFG_REPOSITORY $MP/etc/svc/repository.db
    rm -f $SVCCFG_REPOSITORY
    unset SVCCFG_DTD SVCCFG_REPOSITORY SVCCFG_CHECKHASH
}

############################################################################

seed_smf $VARIANT

if [ "$VARIANT" = nonglobal ]; then
    PROFILEDIR=etc/svc/profile
    ln -s ns_files.xml $MP/$PROFILEDIR/name_service.xml
    ln -s generic_limited_net.xml $MP/$PROFILEDIR/generic.xml
    ln -s inetd_generic.xml $MP/$PROFILEDIR/inetd_services.xml
    ln -s platform_none.xml $MP/$PROFILEDIR/platform.xml
    # Set a blank password for root (to enable zlogin to zone)
    sed -i -e 's%^root::%root:$5$kr1VgdIt$OUiUAyZCDogH/uaxH71rMeQxvpDEY2yX.x0ZQRnmeb9:%' $MP/etc/shadow
fi

note "Creating compressed stream"
zfs snapshot $ZDATASET@kayak || fail "snap"
zfs send $ZDATASET@kayak | pv | xz -T0 -9c > $OUT || fail "send/compress"
xz -l $OUT

############################################################################
# Also build .p5p files for various VM environments

if [ $VARIANT = global ] && ((native)); then
    $SRCDIR/extra_p5p -d $MPR -o $PKGURL
fi

############################################################################

if [ "$CLEANUP" -eq "1" ]; then
    zfs destroy -r $ZDATASET || fail "could not remove zfs dataset"
fi

# Vim hints
# vim:ts=4:sw=4:et:fdm=marker
